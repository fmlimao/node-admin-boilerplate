<%- contentFor('style') %>
<link rel="stylesheet" href="/css/pretty-switch.css">
<style>
    .nav-stacked>li.active>a,
    .nav-stacked>li.active>a:focus,
    .nav-stacked>li.active>a:hover {
        color: #444 !important;
        background-color: transparent !important;
    }
</style>

<%- contentFor('body') %>
<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        <i class="fa fa-lock"></i> Perfis <small>(Permissões)</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="/admin"><i class="fa fa-home"></i> Home</a></li>
        <li class="active"><i class="fa fa-lock"></i> Perfis <small>(Permissões)</small></li>
    </ol>
</section>

<!-- Main content -->
<section class="content" id="AppVue">

    <div class="row">
        <div class="col-md-3">

            <div class="box box-default">
                <div class="box-header with-border">
                    <h3 class="box-title">Perfis</h3>
                    <div class="box-tools pull-right">

                        <button type="button" class="btn btn-default btn-sm" title="Buscar Perfis"
                            @click.prevent="clearSelectRole()">
                            <i class="fa fa-remove"></i>
                        </button>

                        <button type="button" class="btn btn-default btn-sm" title="Buscar Perfis"
                            @click.prevent="getRoles()">
                            <i class="fa fa-refresh"></i>
                        </button>

                        <button type="button" class="btn btn-primary btn-sm" title="Adicionar Perfil"
                            @click.prevent="addRole()">
                            <i class="fa fa-plus"></i>
                        </button>

                    </div>
                </div>
                <!-- /.box-header -->

                <div class="box-body" v-if="!roles.loaded && roles.loading">
                    <div class="alert alert-info">Carregando...</div>
                </div>
                <!-- /.box-body -->

                <div class="box-body no-padding">
                    <ul class="nav nav-pills nav-stacked">
                        <li v-for="role in roles.list" :class="{
                            'active': selectedRole.data.role_id == role.role_id
                        }">
                            <a href="#" @click.prevent="selectRole(role.role_id)">
                                {{ role.name }}
                            </a>
                        </li>
                    </ul>
                </div>
                <!-- /.box-body -->

                <div class="overlay" v-if="roles.loaded && roles.loading"><i class="fa fa-refresh fa-spin"></i></div>

            </div>
            <!-- /. box -->

        </div>
        <!-- /.col -->

        <div class="col-md-9">

            <div class="box box-default">
                <div class="box-header with-border">
                    <h3 class="box-title">Dados Gerais</h3>
                </div>
                <!-- /.box-header -->

                <div class="box-body">
                    <div class="form-groupr" :class="{
                        'has-error': selectedRole.form.fields.name.error
                    }">
                        <label for="iptRoleName">
                            Nome do Perfil
                        </label>
                        <input type="text" id="iptRoleName" class="form-control" placeholder="Nome do Perfil"
                            v-model="selectedRole.form.fields.name.value" :disabled="
                                !selectedRole.data.role_id
                                || selectedRole.data.is_owner == 1
                                || selectedRole.data.is_everyone == 1
                                || selectedRole.form.loading
                            ">
                        <small class="help-block" v-html="selectedRole.form.fields.name.messages.join('<br>')"></small>
                    </div>
                </div>
                <!-- /.box-body -->
            </div>
            <!-- /. box -->

            <div class="alert alert-info" v-if="!resources.loaded">Carregando...</div>

            <div v-else>

                <div class="box box-default" v-for="resource in resources.list">
                    <div class="box-header with-border">
                        <h3 class="box-title">{{ resource.name }}</h3>
                    </div>
                    <!-- /.box-header -->

                    <div class="box-body no-padding">

                        <div class="table-responsive">

                            <table class="table">
                                <tr v-for="privilege in resource.privileges">
                                    <td>
                                        <h4>{{ privilege.name }}</h4>

                                        <p class="text-muted" v-if="privilege.description">
                                            {{ privilege.description }}
                                        </p>
                                    </td>
                                    <td width="150" align="right">
                                        <div style="margin-top: 20px;">

                                            <div class="pretty-switch ps-2">
                                                <input type="radio" :name="privilege.key" value="0" v-model="privilege.value" :disabled="!selectedRole.data.role_id || selectedRole.form.loading">
                                                <input type="radio" :name="privilege.key" value="1" v-model="privilege.value" :disabled="!selectedRole.data.role_id || selectedRole.form.loading">

                                                <div class="states">
                                                    <div class="state">
                                                        <span class="glyphicon glyphicon-remove"></span>
                                                    </div>

                                                    <div class="state">
                                                        <span class="glyphicon glyphicon-ok"></span>
                                                    </div>
                                                </div>
                                                <!-- /.states -->

                                            </div>
                                            <!-- /.pretty-switch -->

                                        </div>
                                    </td>
                                </tr>
                            </table>

                        </div>

                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /. box -->

            </div>

            <div class="box box-default">
                <div class="box-body">
                    <button class="btn btn-success" :disabled="!selectedRole.data.role_id || selectedRole.form.loading"
                        @click.prevent="updateRole()">
                        Salvar
                    </button>

                    <button class="btn btn-danger" :disabled="!selectedRole.data.role_id || selectedRole.form.loading"
                        @click.prevent="openDeleteRole()">
                        Deletar
                    </button>

                    <button class="btn btn-default" :disabled="!selectedRole.data.role_id || selectedRole.form.loading">
                        Cancelar
                    </button>
                </div>
                <!-- /.box-body -->
            </div>
            <!-- /. box -->

        </div>
        <!-- /.col -->
    </div>

</section>

<div class="modal fade" id="modalDeleteRole">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Deletar Perfil</h4>
            </div>
            <div class="modal-body">
                <p>Deseja realmente deletar o perfil <b>{{ selectedRole.data.name }}</b>?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" @click.prevent="deleteRole()">Deletar</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancelar</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<!-- /.modal -->

<%- contentFor('scripts') %>
<script>
    var currentClient = JSON.parse('<%- JSON.stringify(currentClient) %>');

    var ajaxHeaders = {
        'x-access-token': '<%- auth.token %>',
    };

    mixins.push({
        data: {
            resources: {
                loaded: false,
                loading: true,
                list: [],
            },
            roles: {
                loaded: false,
                loading: true,
                list: [],
            },
            selectedRole: {
                data: {
                    role_id: '',
                    name: '',
                    is_owner: '',
                    is_everyone: '',
                    parent_name: '',
                },
                form: {
                    loading: false,
                    fields: {
                        name: {
                            error: false,
                            messages: [],
                            value: '',
                        },
                    },
                },
            },
        },
        methods: {

            init: function () {
                App.getResourcesPrivileges(function () {
                    App.clearPrivilegesValues();
                    App.getRoles();
                });
            },

            alert: function (type, message, title) {
                var notifyOptions = {};

                var notifySettings = {
                    animate: {
                        enter: 'animated fadeInDown',
                        exit: 'animated fadeOutUp'
                    },
                };

                if (message) notifyOptions.message = message;
                if (title) notifyOptions.title = title;
                if (type) notifySettings.type = type;

                $.notify(notifyOptions, notifySettings);
            },

            getResourcesPrivileges: function (finalCallback) {
                function callback(response) {
                    if (response.messages.length) {
                        var message = response.error ? `Erro ao buscar privilégios<br>(${response.messages.join('<br>')})` : response.messages.join('<br>');
                        App.alert(response.error ? 'danger' : 'success', message);
                    }

                    App.resources.list = [];
                    if (response.content.privileges) {
                        App.resources.list = response.content.privileges.reduce((a, c) => {
                            const resource_id = c.resource_id;
                            const resource_name = c.resource_name;
                            const resource_is_owner = c.resource_is_owner;
                            const resource_order = c.resource_order;
                            const privilege_id = c.privilege_id;
                            const privilege_name = c.privilege_name;
                            const privilege_description = c.privilege_description;
                            const privilege_key = c.privilege_key;
                            const privilege_order = c.privilege_order;

                            if (typeof a[resource_id] === 'undefined') {
                                a[resource_id] = {
                                    resource_id: resource_id,
                                    name: resource_name,
                                    is_owner: resource_is_owner,
                                    order: resource_order,
                                    privileges: {},
                                };
                            }

                            if (typeof a[resource_id].privileges[privilege_id] === 'undefined') {
                                a[resource_id].privileges[privilege_id] = {
                                    privilege_id: privilege_id,
                                    name: privilege_name,
                                    description: privilege_description,
                                    key: privilege_key,
                                    order: privilege_order,
                                    value: '',
                                };
                            }

                            return a;
                        }, {});
                    }

                    App.resources.loaded = true;
                    App.resources.loading = false;

                    if (finalCallback) {
                        finalCallback();
                    }
                }

                App.resources.loading = true;

                var url = `/api/clients/${currentClient.client_id}/privileges`;
                axios.get(url, {
                    headers: ajaxHeaders,
                })
                    .then(function (response) {
                        callback(response.data);
                    })
                    .catch(function (err) {
                        callback(err.response.data);
                    });
            },

            clearPrivilegesValues: function () {
                for (var resource_id in App.resources.list) {
                    for (var privilege_id in App.resources.list[resource_id].privileges) {
                        App.resources.list[resource_id].privileges[privilege_id].value = '';
                    }
                }
            },

            getRoles: function (finalCallback) {
                function callback(response) {
                    if (response.messages.length) {
                        var message = response.error ? `Erro ao buscar perfis<br>(${response.messages.join('<br>')})` : response.messages.join('<br>');
                        App.alert(response.error ? 'danger' : 'success', message);
                    }

                    App.roles.list = [];
                    if (response.content.roles) {
                        for (var i in response.content.roles) {
                            App.roles.list.push(response.content.roles[i]);
                        }
                    }

                    App.roles.loaded = true;
                    App.roles.loading = false;

                    if (finalCallback) {
                        finalCallback();
                    } else {
                        App.clearSelectRole();
                    }
                }

                App.roles.loading = true;

                var url = `/api/clients/${currentClient.client_id}/roles`;
                axios.get(url, {
                    headers: ajaxHeaders,
                })
                    .then(function (response) {
                        callback(response.data);
                    })
                    .catch(function (err) {
                        callback(err.response.data);
                    });
            },

            clearSelectRole: function () {
                App.selectedRole = {
                    data: {
                        role_id: '',
                        name: '',
                        is_owner: '',
                        is_everyone: '',
                        parent_name: '',
                    },
                    form: {
                        loading: false,
                        fields: {
                            name: {
                                error: false,
                                messages: [],
                                value: '',
                            },
                        },
                    },
                };

                App.clearPrivilegesValues();
            },

            selectRole: function (role_id) {
                App.clearSelectRole();
                App.clearPrivilegesValues();

                var roleExists = null;

                for (var i in App.roles.list) {
                    if (App.roles.list[i].role_id == role_id) {
                        roleExists = App.roles.list[i];
                    }
                }

                if (roleExists) {
                    App.selectedRole = {
                        data: roleExists,
                        form: {
                            loading: false,
                            fields: {
                                name: {
                                    error: false,
                                    messages: [],
                                    value: roleExists.name,
                                },
                            },
                        },
                    };
                }
            },

            addRole: function () {
                function callback(response) {
                    if (response.messages.length) {
                        var message = response.error ? `Erro ao adicionar perfil<br>(${response.messages.join('<br>')})` : response.messages.join('<br>');
                        App.alert(response.error ? 'danger' : 'success', message);
                    }

                    App.roles.loaded = true;
                    App.roles.loading = false;

                    App.getRoles(function () {
                        if (response.content.role) {
                            App.selectRole(response.content.role.role_id);
                        }
                    });
                }

                App.roles.loading = true;

                var url = `/api/clients/${currentClient.client_id}/roles`;
                axios.post(url, {
                    name: 'Novo Perfil',
                }, {
                    headers: ajaxHeaders,
                })
                    .then(function (response) {
                        callback(response.data);
                    })
                    .catch(function (err) {
                        callback(err.response.data);
                    });
            },

            openDeleteRole: function () {
                $('#modalDeleteRole').modal();
            },

            deleteRole: function () {
                function callback(response) {
                    if (typeof response.messages !== 'undefined') {
                        if (response.messages.length) {
                            var message = response.error ? `Erro ao deletar perfil<br>(${response.messages.join('<br>')})` : response.messages.join('<br>');
                            App.alert(response.error ? 'danger' : 'success', message);
                        }
                    } else {
                        App.alert('success', 'Perfil deletado com sucesso.');
                    }

                    App.getRoles();
                }

                $('#modalDeleteRole').modal('hide');

                if (App.selectedRole.data.role_id) {
                    var role_id = App.selectedRole.data.role_id;

                    App.clearSelectRole();
                    App.selectedRole.form.loading = true;

                    var url = `/api/clients/${currentClient.client_id}/roles/${role_id}`;
                    axios.delete(url, {
                        headers: ajaxHeaders,
                    })
                        .then(function (response) {
                            callback(response.data);
                        })
                        .catch(function (err) {
                            callback(err.response.data);
                        });
                }
            },

            updateRole: function () {
                function callback(response) {
                    console.log('callback()', response);

                    if (response.messages.length) {
                        var message = response.error ? `Erro ao adicionar perfil<br>(${response.messages.join('<br>')})` : response.messages.join('<br>');
                        App.alert(response.error ? 'danger' : 'success', message);
                    }

                    if (response.error) {
                        App.selectedRole.form.loading = false;
                        return;
                    }

                    for (let fieldId in response.form) {
                        App.selectedRole.form.fields[fieldId].error = response.form[fieldId].error;
                        App.selectedRole.form.fields[fieldId].messages = response.form[fieldId].messages;
                    }

                    App.getRoles(function () {
                        App.selectRole(role_id);
                        App.selectedRole.form.loading = false;
                    });
                }

                App.selectedRole.form.fields.name.value = App.selectedRole.form.fields.name.value.trim();
                App.selectedRole.form.fields.name.error = false;
                App.selectedRole.form.fields.name.messages = [];

                var error = false;

                if (!App.selectedRole.form.fields.name.value) {
                    error = true;
                    App.selectedRole.form.fields.name.error = true;
                    App.selectedRole.form.fields.name.messages.push('Campo obrigatório.');
                }

                if (error) {
                    App.alert('danger', 'Verifique todos os campos.');
                }

                App.selectedRole.form.loading = true;

                var role_id = App.selectedRole.data.role_id;

                var url = `/api/clients/${currentClient.client_id}/roles/${role_id}`;
                axios.put(url, {
                    name: App.selectedRole.form.fields.name.value,
                }, {
                    headers: ajaxHeaders,
                })
                    .then(function (response) {
                        callback(response.data);
                    })
                    .catch(function (err) {
                        callback(err.response.data);
                    });
            },

        },
    });
</script>